<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[List等遍历问题]]></title>
    <url>%2F2019%2F10%2F09%2FList-Map-String-Object-%E7%AD%89%E9%81%8D%E5%8E%86%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[这篇文章主要是针对遍历做了一个对比,以下是的对Map,List,List&lt;Map&lt;String,Object&gt;&gt;等比较…………代码文件:https://download.csdn.net/download/qq_42557032/11835207Map遍历:12345Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;sex&quot;, &quot;男&quot;); map.put(&quot;name&quot;, &quot;小明&quot;); map.put(&quot;age&quot;, &quot;12&quot;); System.out.println(map.get(&quot;name&quot;)); 这时打印出来的结果是: 小明, 此时map 遍历里面的内容 List遍历:12345List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;小明&quot;); list.add(&quot;小红&quot;); list.add(&quot;小样&quot;); System.out.println(list); 这时打印出来的是: [小明, 小红, 小样],可以看出来list是把所有的集合都打印出来了. List&lt;Map&lt;String,Object&gt;&gt;遍历:12345678910111213141516171819List&lt;Map&lt;String, Object&gt;&gt; listMap = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(); Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;name&quot;, &quot;小明&quot;); map.put(&quot;sex&quot;, &quot;男&quot;); map.put(&quot;age&quot;, &quot;12&quot;); listMap.add(map); Map&lt;String, Object&gt; map1 = new HashMap&lt;String, Object&gt;(); map1.put(&quot;name&quot;, &quot;小红&quot;); map1.put(&quot;sex&quot;, &quot;女&quot;); map1.put(&quot;age&quot;, &quot;112&quot;); listMap.add(map1); for (Map&lt;String, Object&gt; map2 : listMap) &#123; for (String s : map2.keySet()) &#123; System.out.print(map2.get(s) + &quot; &quot;); &#125; &#125; 这时打印的结果是: 男 小明 12 女 小红 112 ,可以看到这时list里面的map里面的key和value都遍历出来了,其中List&lt;Map&lt;String,Object&gt;&gt;有两种遍历方式: 方法一:遍历List&lt;Map&lt;String,Object&gt;&gt;数据结构，根据指定的key，把所有的value取出来 方法二:遍历List&lt;Map&lt;String,Object&gt;&gt;数据结构，map中所有的key和value 以上是我在总结的,如果有那些不正确的地方希望可以指出来!]]></content>
  </entry>
  <entry>
    <title><![CDATA[秒杀项目]]></title>
    <url>%2F2019%2F09%2F12%2F%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[秒杀项目###源代码视频路径:https://www.imooc.com/video/11704 数据库代码###用命令行创建ssm框架项目##用命令行创建springboot项目https://blog.csdn.net/weixin_42254058/article/details/86061601—mvn archetype:generate -DinteractiveMode=false -DgroupId=com.fm -DartifactId=项目名字 -Dversion=1.0.0-SNAPSHOT ##官网上的一些常用到的资源spring里面用到的头文件https://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/pdf/ –数据库初始化脚本–创建数据库(seckill)–CREATE DATABASE seckilluse seckill CREATE TABLE seckill(seckill_id bigint NOT NULL AUTO_INCREMENT COMMENT ‘商品库存id’,name varchar(120) NOT NULL COMMENT ‘商品名称’,number int NOT NULL COMMENT ‘库存数量’,create_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建时间’,start_time timestamp NOT NULL COMMENT ‘秒杀开始时间’,end_time timestamp NOT NULL COMMENT ‘秒杀结束时间’,PRIMARY KEY (seckill_id),key idx_start_time(start_time),key idx_end_time(end_time),key idx_create_time(create_time))ENGINE=InnoDB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8 COMMENT=’秒杀库存表’; —秒杀成功的表CREATE TABLE success_killed ( seckill_id BIGINT NOT NULL COMMENT ‘商品id’, user_phone BIGINT NOT NULL COMMENT ‘phone’, state TINYINT NOT NULL DEFAULT -1 COMMENT ‘’, create_time TIMESTAMP NOT NULL , PRIMARY KEY (seckill_id,user_phone), KEY idx_create_time(create_time))DEFAULT CHARSET=utf8 COMMENT =’秒杀成功表’; 出现A ResourcePool could not acquire a resource from its primary factory or source.这个错误时:以上问题可能有以下原因造成：1，驱动配置有误：driver=com.mysql.jdbc.Driver2，数据库连接地址有误：url=jdbc:mysql://localhost:3306/test?3useUnicode=true&amp;characterEncoding=utf83，密码或帐号有误：username=root， password=root4，数据库未启动或无权访问5，项目未引入对应的驱动jar包mysql-connector-java-5.1.6-bin.jar6,mysql root没有远程访问的权限，需要增加权限，增加权限的步骤如下：进入mysql数据库：grant all privileges on . to ‘root’@’%’ identified by ‘root’ with grant option;flush privileges; ###logback.xml配置文件的代码： 1234567891011?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;configuration&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;YY-mm-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;root level=&quot;TRACE&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt;&lt;/configuration&gt; logback的pom添加依赖： 1&lt;!--日志依赖 slf4j ,log4j,logback,common-loggingslf4j是规范的接口日志实现则是:log4j,logback,common-logging而我们使用的是slf4j+lgback--&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--实现slf4j接口饼整合--&gt;&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
